*****************************************************************************************************Entity***************************************************************************************************************
- User (id, username, password, color)
- Role (id, isActive, name)
- personDetail (id, lastname, firstname, phoneNumber, mail)
- Address (id, name, streetName, building, floor, city, postCode, region, country)
- Property (id, type, namePlace, color, acquisitionDate, acquisitionPrice, acquisitionFee, agencyFee, propertyValue, fk_addressId)
- PropertyDocument (id, created_at, updated_at, documentType, filePathPropertyDocument, fk_propertyId)
- PropertyImage (id, created_at, updated_at, filePathPropertyImage, isMain, fk_propertyId)
- Description (id, area, numberOfRooms, numberOfBedrooms, numberOfbathrooms, constructionDate, propertyType, legalRegime, furnished, parking, dependency, cellarType, buildingLot, 
                thousandths, updateImage, equipment, comment, privateComment, fk_propertyId)
- Tax (id, taxSystem, taxNumber, taxName, taxAmount, propertyTax, fk_propertyId)
- LandRegistry (id, sheet, parcel, category, rentalValue, fk_propertyId)
- Rental (id, color, startDate, endDate, rentalType, grossRent, charge, netRent, deposit, lease, reference, purposeUse, duration, 
                paymentPeriod, paymentMethod, paymentDay, privateComment, fk_propertyId)
- RentalDocument (id, receiptDate (date de quittancement), noticeRentDueDate (date avis échéance), uploadRentalDocumentPath, fk_rentalId)
- tenant (id, color, civility, dateOfBirth, placeOfBirth, nationality, profession, monthlyIncome, privateComment, hasGuarantor, fk_personDetailId)
- guarantor (id, color, guarantorType, civility, dateOfBirth, placeOfBirth, profession, monthlyIncome, privateComment, guarantorCompanyName, fk_addressId, fk_personDetailId, fk_tenantId)
- identityLeaseParty (id, identityDocumentType, identityNumber, identityDocumentExpiration)
- identityDocument (id, filePathDocumentIdentity )

***********************************************************************************************Explications***************************************************************************************************************
- inheritage personDetail with guarantor, tenant and user.
- need a "username" to enter in the app because mail is used for Guarantor, Tenant and User.
- I have tried to create only LeaseParty to work with a tenant and a guarantor but it was difficult to collect datas of the guarantor. I had created, a guarantorType and a tenantType related to leaseParty. 
My solution is to create tables Guarantor and Tenant separately although they have similar characteristics in the table, it easier to manipulate them.
- rentalDocument example : diagnosis and contracts of the lease.
- Associatives tables named : 
        tenantRental created by ManyToMany relation between Tenant and Rental.
        userRoles created by ManyToMany relation between User and Role.

- Upload doucments/Images : constraints have to be managed in the service of the controller and not in the form. Indeed 'File' constraints expect string values but are receiving empty arrays instead. This happens because in the form, 
if you set up validation constraints on FileType fields that allow multiple files to be uploaded (using multiple => true). When you configure a FileType field in Symfony with the multiple option set to true, Symfony expects an array 
of uploaded files (or an empty array if no files were uploaded). The File constraint, on the other hand, is typically meant to validate a single file (i.e., a single string representing the file's path or name).
So, when Symfony tries to validate the file uploads, it encounters a mismatch: it expects a single file, but it gets an array instead, which leads to the error "This value should be of type string."

How to Fix It
To fix this issue, you should:
1) Remove the File constraint from the form field definition if you are allowing multiple file uploads. Instead, apply the constraints manually in your controller after the form is submitted.
2) Validate each file individually in the controller after you’ve retrieved the array of uploaded files. This approach allows you to check each file's properties (like type and size) and handle any validation errors more flexibly.

This way, you avoid the type mismatch and can provide more appropriate validation for each file in the upload process.

***********************************************************************************************Services*******************************************************************************************************************

How to make a service :

1) Create a class into src (which is called Service here)
2) Into Service, create all the services needed (exemple here UploadFilesService)
3) Modify service.yaml : Add parameters and join an external service with App\Service\UploadFilesService (App\classNameIntoSrc\serviceName)
parameters:
    images_directory_property: '%kernel.project_dir%/public/uploads/propertyImages'
    documents_directory_property: '%kernel.project_dir%/public/uploads/propertyDocuments'

services:
    App\Service\UploadFilesService:
        arguments:
            $imagesDirectoryProperty: '%images_directory_property%'
            $documentsDirectoryProperty: '%documents_directory_property%'

4) From your controller, call the service into your paramater 
(exemple :  public function new(Request $request, EntityManagerInterface $entityManager, UploadFilesService $uploadFilesService): Response))









////////////////////////////////////////////////////////////////////////////////////////////First Try failed//////////////////////////////////////////////////////////////////////////////////////////

*****************************************************************************************************Entity***************************************************************************************************************
- User (id, username, password, color)
- Role (id, isActive, name)
- personDetail (id, lastname, firstname, phoneNumber, mail)
- Address (id, name, streetName, building, floor, city, postCode, region, country)
- Property (id, type, namePlace, color, acquisitionDate, acquisitionPrice, acquisitionFee, agencyFee, propertyValue, fk_addressId)
- PropertyDocument (id, created_at, updated_at, documentType, uploadPropertyDocumentPath, fk_propertyId)
- PropertyImage (id, created_at, updated_at, image, isMain, fk_propertyId)
- Description (id, area, numberOfRooms, numberOfBedrooms, numberOfbathrooms, constructionDate, propertyType, legalRegime, furnished, parking, dependency, cellarType, buildingLot, 
                thousandths, updateImage, equipment, comment, privateComment, fk_propertyId)
- Tax (id, taxSystem, taxNumber, taxName, taxAmount, propertyTax, fk_propertyId)
- LandRegistry (id, sheet, parcel, category, rentalValue, fk_propertyId)
- Rental (id, startDate, endDate, rentalType, grossRent, charge, netRent, deposit, lease, reference, purposeUse, duration, 
                paymentPeriod, paymentMethod, paymentDay, privateComment, fk_propertyId)
- RentalDocument (id, receiptDate (date de quittancement), noticeRentDueDate (date avis échéance), uploadRentalDocumentPath, fk_rentalId)
- LeaseParty (id, color, leasePartiesType, civility, justifyIdImage, dateOfBirth, placeOfBirth, profession, monthlyIncome)
- IdentityDocument (id, created_at, updated_at, identityDocumentType, identityNumber, identityDocumentExpiration, uploadIdentityPath)

***********************************************************************************************Explications***************************************************************************************************************
- heritage personDetail with leaseParty and user.
- need a "username" to enter in the app because mail is used for both leaseParty and User.
- leaseParty example : guarantor and tenant.
- rentalDocument example : diagnosis and contracts of the lease.
- Associatives tables named : 
        leasePartyRental created by ManyToMany relation between leaseParty and Rental.
        userRoles created by ManyToMany relation between User and Role.

