*****************************************************************************************************Entity***************************************************************************************************************
- User (id, username, password, color)
- Role (id, isActive, name)
- personDetail (id, lastname, firstname, phoneNumber, mail)
- Address (id, name, streetName, building, floor, city, postCode, region, country)
- Property (id, type, namePlace, color, acquisitionDate, acquisitionPrice, acquisitionFee, agencyFee, propertyValue, fk_addressId)
- PropertyDocument (id, created_at, updated_at, documentType, filePathPropertyDocument, fk_propertyId)
- PropertyImage (id, created_at, updated_at, filePathPropertyImage, isMain, fk_propertyId)
- Description (id, area, numberOfRooms, numberOfBedrooms, numberOfbathrooms, constructionDate, propertyType, legalRegime, furnished, parking, dependency, cellarType, buildingLot, 
                thousandths, updateImage, equipment, comment, privateComment, fk_propertyId)
- Tax (id, taxSystem, taxNumber, taxName, taxAmount, propertyTax, fk_propertyId)
- LandRegistry (id, sheet, parcel, category, rentalValue, fk_propertyId)
- Rental (id, color, startDate, endDate, rentalType, grossRent, charge, netRent, deposit, lease, reference, purposeUse, duration, 
                paymentPeriod, paymentMethod, paymentDay, privateComment, fk_propertyId)
- RentalDocument (id, receiptDate (date de quittancement), noticeRentDueDate (date avis échéance), uploadRentalDocumentPath, fk_rentalId)
- tenant (id, color, civility, dateOfBirth, placeOfBirth, nationality, profession, monthlyIncome, privateComment, hasGuarantor, fk_personDetailId)
- guarantor (id, color, guarantorType, civility, dateOfBirth, placeOfBirth, profession, monthlyIncome, privateComment, guarantorCompanyName, fk_addressId, fk_personDetailId, fk_tenantId)
- IdentityDocument (id, created_at, updated_at, identityDocumentType, identityNumber, identityDocumentExpiration, uploadIdentityPath)

***********************************************************************************************Explications***************************************************************************************************************
- inheritage personDetail with guarantor, tenant and user.
- need a "username" to enter in the app because mail is used for Guarantor, Tenant and User.
- I have tried to create only LeaseParty to work with a tenant and a guarantor but it was difficult to collect datas of the guarantor. I had created, a guarantorType and a tenantType related to leaseParty. 
My solution is to create tables Guarantor and Tenant separately although they have similar characteristics in the table, it easier to manipulate them.
- rentalDocument example : diagnosis and contracts of the lease.
- Associatives tables named : 
        tenantRental created by ManyToMany relation between Tenant and Rental.
        userRoles created by ManyToMany relation between User and Role.






////////////////////////////////////////////////////////////////////////////////////////////First Try failed//////////////////////////////////////////////////////////////////////////////////////////

*****************************************************************************************************Entity***************************************************************************************************************
- User (id, username, password, color)
- Role (id, isActive, name)
- personDetail (id, lastname, firstname, phoneNumber, mail)
- Address (id, name, streetName, building, floor, city, postCode, region, country)
- Property (id, type, namePlace, color, acquisitionDate, acquisitionPrice, acquisitionFee, agencyFee, propertyValue, fk_addressId)
- PropertyDocument (id, created_at, updated_at, documentType, uploadPropertyDocumentPath, fk_propertyId)
- PropertyImage (id, created_at, updated_at, image, isMain, fk_propertyId)
- Description (id, area, numberOfRooms, numberOfBedrooms, numberOfbathrooms, constructionDate, propertyType, legalRegime, furnished, parking, dependency, cellarType, buildingLot, 
                thousandths, updateImage, equipment, comment, privateComment, fk_propertyId)
- Tax (id, taxSystem, taxNumber, taxName, taxAmount, propertyTax, fk_propertyId)
- LandRegistry (id, sheet, parcel, category, rentalValue, fk_propertyId)
- Rental (id, startDate, endDate, rentalType, grossRent, charge, netRent, deposit, lease, reference, purposeUse, duration, 
                paymentPeriod, paymentMethod, paymentDay, privateComment, fk_propertyId)
- RentalDocument (id, receiptDate (date de quittancement), noticeRentDueDate (date avis échéance), uploadRentalDocumentPath, fk_rentalId)
- LeaseParty (id, color, leasePartiesType, civility, justifyIdImage, dateOfBirth, placeOfBirth, profession, monthlyIncome)
- IdentityDocument (id, created_at, updated_at, identityDocumentType, identityNumber, identityDocumentExpiration, uploadIdentityPath)

***********************************************************************************************Explications***************************************************************************************************************
- heritage personDetail with leaseParty and user.
- need a "username" to enter in the app because mail is used for both leaseParty and User.
- leaseParty example : guarantor and tenant.
- rentalDocument example : diagnosis and contracts of the lease.
- Associatives tables named : 
        leasePartyRental created by ManyToMany relation between leaseParty and Rental.
        userRoles created by ManyToMany relation between User and Role.

